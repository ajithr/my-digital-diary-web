@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject UserState userState
@inject NavigationManager NavigationManager

<MudDialog Class="bank-account-popup">
    <TitleContent>
        <MudText Typo="Typo.h6">
            @if (!IsAddAccount)
            {
                <div class="d-flex align-items-center">
                    <BSCol>Update Account</BSCol>
                    <BSCol>
                        <div class="d-flex justify-content-end mr-10" role="button" @onclick="() => OnFormAction(true)">
                            <MudIcon Icon="@Icons.Filled.Delete" />
                        </div>
                    </BSCol>
                </div>
            }
            else
            {
                <span>Add Account</span>
            }
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="bank-account-form">
            @if (IsAddAccount && Model.BankName == null)
            {
                <MudList Clickable="true">
                    @foreach (KeyValuePair<string, string> bankDetail in Banks.BankNames)
                    {
                        <MudListItem OnClick="() => OnItemSelected(bankDetail.Key, bankDetail.Value)">
                            <div tabindex="0" class="mud-list-item mud-list-item-gutters mud-list-item-clickable mud-ripple">
                                <div class="mud-list-item-icon">
                                    <MudAvatar Class="bank-logo" Image="@("images/banks/" + bankDetail.Value)" Alt="@bankDetail.Key" />
                                </div>
                                <div class="mud-list-item-text">
                                    <MudText Typo="Typo.body1">@bankDetail.Key</MudText>
                                </div>
                            </div>
                        </MudListItem>
                    }
                </MudList>
            }
            else
            {
                <EditForm Model="Model" OnValidSubmit="() => OnFormAction(false)">
                    <DataAnnotationsValidator />
                    <BSContainer Container="Container.Fluid">
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <BSCol>
                                <MudAvatar Class="d-flex mx-auto bank-logo" Size="MudBlazor.Size.Large" Image="@ImagePath" Style="width:5rem;height:5rem;" />
                            </BSCol>
                        </BSRow>
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <MudTextField @bind-Value="Model.BankName" Label="Bank Name" Variant="Variant.Outlined" For="@(() => Model.BankName)"
                                      Margin="Margin.Dense"></MudTextField>
                        </BSRow>
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <MudTextField @bind-Value="Model.IFSC" Label="IFSC" Variant="Variant.Outlined" For="@(() => Model.IFSC)"
                                      Margin="Margin.Dense"></MudTextField>
                        </BSRow>
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <MudTextField @bind-Value="Model.AccountHolderName" Label="Account Holder Name" Variant="Variant.Outlined" For="@(() => Model.AccountHolderName)"
                                      Margin="Margin.Dense"></MudTextField>
                        </BSRow>
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <MudTextField @bind-Value="Model.AccountNumber" Label="Account Number" Variant="Variant.Outlined" For="@(() => Model.AccountNumber)"
                                      Margin="Margin.Dense"></MudTextField>
                        </BSRow>
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <MudSelect T="string" @bind-Value="Model.AccountType" Label="Account Type" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense"
                                   For="@(() => Model.AccountType)">
                                @foreach (string accountType in Banks.AccountTypes)
                                {
                                    <MudSelectItem T="string" Value="accountType" />
                                }
                            </MudSelect>
                        </BSRow>
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="MudBlazor.Size.Large" ButtonType="ButtonType.Submit"
                                   FullWidth="true" Style="@($"background:{userState.Theme}")">@submitLabel</MudButton>
                        </BSRow>
                    </BSContainer>
                </EditForm>
            }
        </div>
    </DialogContent>
</MudDialog>

@if (IsAddAccount && Model.BankName == null)
{
    <style>
        .bank-account-popup .mud-dialog-content {
            padding: 0.5rem 0;
        }
    </style>
}

<style>
    .bank-account-popup {
        width: 100%;
    }

    .bank-account-popup .bank-logo {
        background: transparent;
        border: 1px solid #dadce0;
    }

    .bank-account-popup .mud-avatar-img {
        height: auto;
    }

    .bank-account-form {
        max-height: calc(100vh - 4.875rem);
        overflow-y: scroll
    }

    .bank-account-form .mud-select {
        padding: 0;
    }

    .bank-account-popup .mud-input.mud-input-outlined:focus-within .mud-input-outlined-border {
        border-color: @userState.Theme;
    }

    .bank-account-popup .mud-input:focus-within ~ label.mud-input-label.mud-input-label-inputcontrol.mud-input-label-outlined {
        color: @userState.Theme;
    }
</style>

@code {
    private bool isUpdating;
    private string submitLabel;
    private BankDetails Model { get; set; } = new BankDetails();

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; }

    [CascadingParameter]
    public EventCallback<bool> SetLoader { get; set; }

    [Parameter]
    public bool IsAddAccount { get; set; }
    [Parameter]
    public Guid Id { get; set; }
    [Parameter]
    public string BankName { get; set; }
    [Parameter]
    public string IFSC { get; set; }
    [Parameter]
    public string AccountHolderName { get; set; }
    [Parameter]
    public string AccountNumber { get; set; }
    [Parameter]
    public string AccountType { get; set; }
    [Parameter]
    public string ImagePath { get; set; }

    private void OnItemSelected(string selectedItem, string imagePath)
    {
        Model.BankName = selectedItem;
        ImagePath = "images/banks/" + imagePath;
    }

    private async Task OnFormAction(bool isDeleted = false)
    {
        MudDialog.Close(DialogResult.Ok(true));
        await SetLoader.InvokeAsync(true);
        Model.UserName = userState.LoggedInUserID;
        string apiPath = "updateAccount";
        var model = Model;
        if (IsAddAccount)
        {
            model.Id = Guid.NewGuid();
            model.ImagePath = ImagePath;
            apiPath = "addAccount";
        }
        else if (isDeleted)
        {
            apiPath = "removeAccount";
        }
        else
        {
            isUpdating = true;
        }
        HttpResponseMessage response = await Http.PostAsJsonAsync("https://mydigitaldiaryservice.azurewebsites.net/" + apiPath, model);
        BankAccountApiResponse cardResponse = await response.Content.ReadFromJsonAsync<BankAccountApiResponse>();
        if (cardResponse != null)
        {
            if (cardResponse.IsAccountAdded)
            {
                await userState.NotifyFormAction(model, CRUD.Add);
            }
            else if (cardResponse.IsAccountUpdated)
            {
                await userState.NotifyFormAction(model, CRUD.Update);
            }
            else if (cardResponse.IsAccountDeleted)
            {
                await userState.NotifyFormAction(model, CRUD.Delete);
            }
            else
            {
                var errorMessage = cardResponse.ErrorMessage != null ? cardResponse.ErrorMessage : "Something went wrong. Try again!";
                Snackbar.Add(errorMessage, Severity.Error);
            }
            isUpdating = false;
        }
        await SetLoader.InvokeAsync(false);
    }

    protected override void OnParametersSet()
    {
        submitLabel = IsAddAccount ? "Add" : "Update";
        if (!IsAddAccount && !isUpdating)
        {
            Model.Id = Id;
            Model.BankName = BankName;
            Model.IFSC = IFSC;
            Model.AccountHolderName = AccountHolderName;
            Model.AccountNumber = AccountNumber;
            Model.AccountType = AccountType;
            Model.ImagePath = ImagePath;
        }
    }
}