@page "/"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject UserState userState;
@inject NavigationManager NavigationManager

<AppLayout ClassName="user-signin" Heading="Log in">
    <MudSnackbarProvider />
    <EditForm Model="Model" OnSubmit="OnSubmit" @onreset="OnReset">
        <DataAnnotationsValidator />
        <BSContainer>
            <BSRow MarginBottom="Margins.ExtraLarge">
                <MudTextField @bind-Value="Model.UserName" Label="User name" Variant="Variant.Outlined" For="@(() => Model.UserName)" Margin="Margin.Dense"></MudTextField>
            </BSRow>
            <BSRow MarginBottom="Margins.ExtraLarge">
                <MudTextField @bind-Value="Model.Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" Margin="Margin.Dense"
                              AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="OnPasswordIconClick" AdornmentAriaLabel="Show Password" For="@(() => Model.Password)"></MudTextField>
            </BSRow>
            <BSRow MarginBottom="Margins.ExtraLarge">
                <BSCol Column="6" Class="pl-0">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="MudBlazor.Size.Large" ButtonType="ButtonType.Submit" FullWidth="true">Sign In</MudButton>
                </BSCol>
                <BSCol Column="6" Class="pr-0">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="MudBlazor.Size.Large" ButtonType="ButtonType.Reset" FullWidth="true">Reset</MudButton>
                </BSCol>
            </BSRow>
            <MudDivider DividerType="DividerType.Middle" Light="true" Class="mt-10" />
            <BSRow MarginTopAndBottom="Margins.ExtraLarge" Align="BlazorStrap.Align.Center">
                <div>
                    <MudLink Href="reset-password" @onclick="OnReset">Forgot password?</MudLink>
                </div>
            </BSRow>
            <BSRow Align="BlazorStrap.Align.Center">
                <div>
                    <span>Don't have a User ID?</span>
                    <MudLink Href="create-account" @onclick="OnReset">Create account</MudLink>
                </div>
            </BSRow>
        </BSContainer>
    </EditForm>
</AppLayout>


@code {
    private bool isShow;
    private UserLoginModel Model { get; set; } = new UserLoginModel();
    public MudBlazor.InputType PasswordInput = MudBlazor.InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    [CascadingParameter]
    protected EventCallback<bool> SetLoader { get; set; }

    public void OnPasswordIconClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = MudBlazor.InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = MudBlazor.InputType.Text;
        }
    }

    private async Task OnSubmit(EditContext e)
    {
        if (e.Validate())
        {
            await SetLoader.InvokeAsync(true);
            HttpResponseMessage response = await Http.PostAsJsonAsync("https://mydigitaldiaryservice.azurewebsites.net/validateUser", Model);
            UserLoginResponse? loginResponse = await response.Content.ReadFromJsonAsync<UserLoginResponse>();
            if (loginResponse != null)
            {
                if (loginResponse.IsValidUser)
                {
                    await userState.SetLogin(true, Model.UserName);
                    await SetLoader.InvokeAsync(false);
                    NavigationManager.NavigateTo("dashboard");
                }
                else
                {
                    var errorMessage = loginResponse.ErrorMessage != null ? loginResponse.ErrorMessage : "Incorrect username and password!";
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            await SetLoader.InvokeAsync(false);
        }
    }

    public void OnReset()
    {
        Snackbar.Clear();
        Model = new UserLoginModel();
    }
}



