@page "/reset-password"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<AppLayout ClassName="create-account" Heading="Reset your password">
    <MudSnackbarProvider />

    <EditForm Model="Model" OnSubmit="OnSubmit">
        <DataAnnotationsValidator />
        <BSContainer>
            <BSRow MarginBottom="Margins.ExtraLarge">
                <MudTextField @bind-Value="Model.UserName" Label="User name" Variant="Variant.Outlined" For="@(() => Model.UserName)" Margin="Margin.Dense"></MudTextField>
            </BSRow>
            <BSRow MarginBottom="Margins.ExtraLarge">
                <MudTextField @bind-Value="Model.Password" Label="New Password" Variant="Variant.Outlined" Margin="Margin.Dense"
                              For="@(() => Model.Password)"></MudTextField>
            </BSRow>
            <BSRow MarginBottom="Margins.ExtraLarge">
                <MudTextField @bind-Value="Model.ConfirmPassword" Label="Confirm password" Variant="Variant.Outlined" Margin="Margin.Dense"
                              For="@(() => Model.ConfirmPassword)"></MudTextField>
            </BSRow>
            <BSRow MarginBottom="Margins.ExtraLarge">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="MudBlazor.Size.Large" ButtonType="ButtonType.Submit" FullWidth="true">Reset Password</MudButton>
            </BSRow>
            <MudDivider DividerType="DividerType.Middle" Light="true" Class="mt-10" />
            <BSRow MarginTopAndBottom="Margins.ExtraLarge">
                <div class="text-center">
                    <MudIcon Icon="@Icons.Filled.KeyboardArrowLeft" Color="MudBlazor.Color.Primary"></MudIcon>
                    <MudLink Href="sign-in" @onclick=@(() => {Snackbar.Clear();})>Sign In</MudLink>
                </div>
            </BSRow>
        </BSContainer>
    </EditForm>
</AppLayout>

@code {
    private ResetPasswordModel Model { get; set; } = new ResetPasswordModel();

    [CascadingParameter]
    protected EventCallback<bool> SetLoader { get; set; }

    private async Task OnSubmit(EditContext e)
    {
        if (e.Validate())
        {
            await SetLoader.InvokeAsync(true);
            HttpResponseMessage response = await Http.PostAsJsonAsync("https://mydigitaldiaryservice.azurewebsites.net/updateUser", Model);
            UserLoginResponse? resetResponse = await response.Content.ReadFromJsonAsync<UserLoginResponse>();
            if (resetResponse != null)
            {
                if (resetResponse.IsUserProfileUpdated)
                {
                    Snackbar.Add("Password reset successfully!", Severity.Success);
                    Model = new ResetPasswordModel();
                }
                else if (!resetResponse.IsValidUser)
                {
                    Snackbar.Add("The username doesn't exist. Enter a valid username.", Severity.Error);
                }
                else if (resetResponse.ErrorMessage != null)
                {
                    Snackbar.Add(resetResponse.ErrorMessage, Severity.Error);
                }
            }
            await SetLoader.InvokeAsync(false);
        }
    }
}
