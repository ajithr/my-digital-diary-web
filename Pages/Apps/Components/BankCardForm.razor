@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject UserState userState
@inject NavigationManager NavigationManager

<MudDialog Class="bank-card-popup">
    <DialogContent>
        <div class="bank-card-form">
            @if (IsAddCard && Model.BankName == null)
            {
                <MudList Clickable="true">
                    @foreach (KeyValuePair<string, string> bankDetail in Banks.BankNames)
                    {
                        <MudListItem OnClick="() => OnItemSelected(bankDetail.Key, bankDetail.Value)">
                            <div tabindex="0" class="mud-list-item mud-list-item-gutters mud-list-item-clickable mud-ripple">
                                <div class="mud-list-item-icon">
                                    <MudAvatar Class="bank-logo" Image="@("images/banks/" + bankDetail.Value)" Alt="@bankDetail.Key" />
                                </div>
                                <div class="mud-list-item-text">
                                    <MudText Typo="Typo.body1">@bankDetail.Key</MudText>
                                </div>
                            </div>
                        </MudListItem>
                    }
                </MudList>
            }
            else
            {
                <EditForm Model="Model" OnSubmit="OnSubmit">
                    <DataAnnotationsValidator />
                    <BSContainer Container="Container.Fluid">
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <BSCol>
                                <MudAvatar Class="d-flex mx-auto bank-logo" Size="MudBlazor.Size.Large" Image="@ImagePath" Style="width:5rem;height:5rem;" />
                            </BSCol>
                        </BSRow>
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <MudTextField @bind-Value="Model.BankName" Label="Bank Name" Variant="Variant.Outlined" For="@(() => Model.BankName)"
                                      Margin="Margin.Dense"></MudTextField>

                        </BSRow>
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <MudTextField @bind-Value="Model.CardNumber" Label="Card Number" Variant="Variant.Outlined" For="@(() => Model.CardNumber)"
                                      Margin="Margin.Dense"></MudTextField>

                        </BSRow>
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <BSCol Class="pl-0">
                                <MudNumericField @bind-Value="Model.ExpiryMonth" Label="Exp Month" Variant="Variant.Outlined"
                                             Margin="Margin.Dense" For="@(() => Model.ExpiryMonth)" />
                            </BSCol>
                            <BSCol Class="pr-0">
                                <MudNumericField @bind-Value="Model.ExpiryYear" Label="Exp Year" Variant="Variant.Outlined"
                                             Margin="Margin.Dense" For="@(() => Model.ExpiryYear)" />
                            </BSCol>
                        </BSRow>
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <MudTextField @bind-Value="Model.CardHolderName" Label="Card Holder Name" Variant="Variant.Outlined" For="@(() => Model.CardHolderName)"
                                      Margin="Margin.Dense"></MudTextField>

                        </BSRow>
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <BSCol Class="pl-0">
                                <MudTextField @bind-Value="Model.CVV" Label="CVV" Variant="Variant.Outlined" For="@(() => Model.CVV)" Margin="Margin.Dense"
                                          InputType="@CVVInput" Adornment="Adornment.End" AdornmentIcon="@CVVIcon" OnAdornmentClick="OnCVVIconClick"></MudTextField>
                            </BSCol>
                            <BSCol Class="pr-0">
                                <MudTextField @bind-Value="Model.Pin" Label="Pin" Variant="Variant.Outlined" For="@(() => Model.Pin)" Margin="Margin.Dense"
                                          InputType="@PinInput" Adornment="Adornment.End" AdornmentIcon="@PinIcon" OnAdornmentClick="OnPinIconClick"></MudTextField>
                            </BSCol>
                        </BSRow>
                        <BSRow MarginBottom="Margins.ExtraLarge">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="MudBlazor.Size.Large" ButtonType="ButtonType.Submit" FullWidth="true">@submitLabel</MudButton>
                        </BSRow>
                    </BSContainer>
                </EditForm>
            }
        </div>
    </DialogContent>
</MudDialog>

@if (IsAddCard && Model.BankName == null)
{
    <style>
        .bank-card-popup .mud-dialog-content {
            padding: 0.5rem 0;
        }
    </style>
}

<style>
    .bank-card-popup {
        width: 100%;
    }

        .bank-card-popup .bank-logo {
            background: transparent;
            border: 1px solid #dadce0;
        }

        .bank-card-popup .mud-avatar-img {
            height: auto;
        }

    .bank-card-form {
        max-height: calc(100vh - 4.875rem);
        overflow-y: scroll
    }
</style>

@code {
    private bool pinVisible;
    private bool cvvVisible;
    private string submitLabel;
    private CardDetails Model { get; set; } = new CardDetails();
    public MudBlazor.InputType PinInput = MudBlazor.InputType.Password;
    string PinIcon = Icons.Material.Filled.VisibilityOff;
    public MudBlazor.InputType CVVInput = MudBlazor.InputType.Password;
    string CVVIcon = Icons.Material.Filled.VisibilityOff;

    [CascadingParameter]
    protected EventCallback<bool> SetLoader { get; set; }

    [Parameter]
    public bool IsAddCard { get; set; }
    [Parameter]
    public Guid Id { get; set; }
    [Parameter]
    public string BankName { get; set; }
    [Parameter]
    public string CardNumber { get; set; }
    [Parameter]
    public string ExpiryMonth { get; set; }
    [Parameter]
    public string ExpiryYear { get; set; }
    [Parameter]
    public string CardHolderName { get; set; }
    [Parameter]
    public int? CVV { get; set; }
    [Parameter]
    public int? Pin { get; set; }
    [Parameter]
    public string ImagePath { get; set; }

    public void OnCVVIconClick()
    {
        @if (!cvvVisible)
        {
            CVVIcon = Icons.Material.Filled.Visibility;
            CVVInput = MudBlazor.InputType.Text;
        }
        else
        {
            CVVIcon = Icons.Material.Filled.VisibilityOff;
            CVVInput = MudBlazor.InputType.Password;
        }
        cvvVisible = !cvvVisible;
    }

    public void OnPinIconClick()
    {
        @if (!pinVisible)
        {
            PinIcon = Icons.Material.Filled.Visibility;
            PinInput = MudBlazor.InputType.Text;

        }
        else
        {
            PinIcon = Icons.Material.Filled.VisibilityOff;
            PinInput = MudBlazor.InputType.Password;
        }
        pinVisible = !pinVisible;
    }

    private void OnItemSelected(string selectedItem, string imagePath)
    {
        Model.BankName = selectedItem;
        ImagePath = "images/banks/" + imagePath;
    }

    private async Task OnSubmit(EditContext e)
    {
        if (e.Validate())
        {
            await SetLoader.InvokeAsync(true);
            Model.UserName = userState.LoggedInUserID;
            if (IsAddCard)
            {
                Model.Id = Guid.NewGuid();
                HttpResponseMessage response = await Http.PostAsJsonAsync("https://mydigitaldiaryservice.azurewebsites.net/addCard", Model);
                CardApiResponse? cardResponse = await response.Content.ReadFromJsonAsync<CardApiResponse>();
                if (cardResponse != null)
                {
                    if (cardResponse.IsCardAdded)
                    {
                        Model = new CardDetails();
                        NavigationManager.NavigateTo("cards");
                    }
                    else
                    {
                        var errorMessage = cardResponse.ErrorMessage != null ? cardResponse.ErrorMessage : "Something went wrong. Try again!";
                        Snackbar.Add(errorMessage, Severity.Error);
                    }
                }
            }
            else
            {
                HttpResponseMessage response = await Http.PostAsJsonAsync("https://mydigitaldiaryservice.azurewebsites.net/updateCard", Model);
                CardApiResponse? cardResponse = await response.Content.ReadFromJsonAsync<CardApiResponse>();
                if (cardResponse != null)
                {
                    if (cardResponse.IsCardUpdated)
                    {
                        Model = new CardDetails();
                        NavigationManager.NavigateTo("cards");
                    }
                    else
                    {
                        var errorMessage = cardResponse.ErrorMessage != null ? cardResponse.ErrorMessage : "Something went wrong. Try again!";
                        Snackbar.Add(errorMessage, Severity.Error);
                    }
                }
            }

            await SetLoader.InvokeAsync(false);
        }
    }

    protected override void OnParametersSet()
    {
        submitLabel = IsAddCard ? "Add" : "Update";
        if (!IsAddCard)
        {
            Model.BankName = BankName;
            Model.CardHolderName = CardHolderName;
            Model.CardNumber = CardNumber;
            Model.CVV = CVV;
            Model.ExpiryMonth = ExpiryMonth;
            Model.ExpiryYear = ExpiryYear;
            Model.Pin = Pin;
        }
    }
}