@inherits LayoutComponentBase
@inject IJSRuntime JS;
@inject UserState userState;
@inject NavigationManager NavigationManager;

<MudThemeProvider />
<MediaQueryList>
    <MediaQuery Media="@BlazorPro.BlazorSize.Breakpoints.MediumDown" @bind-Matches="IsMediumDown" />
    <div class="page">
        <BSContainer Container="Container.Default">
            <header>
                @if (userState.IsUserLoggedIn)
                {
                    <div class="home-icon" @onclick="OnHomeClick">
                        <MudIcon Icon="@Icons.Material.Filled.Home" Size=@(IsMediumDown ? MudBlazor.Size.Medium : MudBlazor.Size.Large ) Style="@($"color:{userState.Theme};")" />
                    </div>
                }
                <h1 class="m-0">My Digital Diary!</h1>
                @if (userState.IsUserLoggedIn)
                {
                    <div class="avatar-wrapper">
                        <MudMenu Icon="@Icons.Material.Filled.Settings" AnchorOrigin="Origin.BottomLeft" Size=@(IsMediumDown ? MudBlazor.Size.Medium : MudBlazor.Size.Large ) TransformOrigin="Origin.BottomCenter">
                            <MudMenuItem OnClick="OnThemeNav" OnTouch="OnThemeNav">
                                <MudIcon Icon="@Icons.Filled.ColorLens" Size=@(IsMediumDown ? MudBlazor.Size.Medium : MudBlazor.Size.Large ) Style="@($"color:{userState.Theme};")" />  Themes
                            </MudMenuItem>
                            <MudMenuItem OnClick="OnLogOut" OnTouch="OnLogOut">
                                <MudIcon Icon="@Icons.Filled.Logout" Size=@(IsMediumDown ? MudBlazor.Size.Medium : MudBlazor.Size.Large ) Style="@($"color:{userState.Theme};")" />  Logout
                            </MudMenuItem>
                        </MudMenu>
                    </div>
                }
            </header>
            <main>
                <CascadingValue Value=SetLoader>
                    @Body
                </CascadingValue>
            </main>
        </BSContainer>
        <MudOverlay @bind-Visible="showLoader" LightBackground="true" Absolute="true">
            <MudProgressCircular Style="@($"color:{userState.Theme};")" Size="MudBlazor.Size.Medium" Indeterminate="true" />
        </MudOverlay>
    </div>
</MediaQueryList>

<style>
    header {
        box-shadow: inset 0 -3px 0 0 @userState.Theme;
    }

    .avatar-wrapper .mud-menu button {
        color: @userState.Theme;
    }
</style>

@code {
    private bool isJsInit;
    private bool showLoader;
    private IJSObjectReference? module;
    public bool IsMediumDown { get; set; }


    protected override void OnParametersSet()
    {
        string routePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        List<string> skipPages = new List<string>() { string.Empty, "reset-password", "create-account" };
        @if (!userState.IsUserLoggedIn && !skipPages.Contains(routePath))
        {
            NavigationManager.NavigateTo("/");
        }
    }
    public async Task OnLogOut()
    {
        isJsInit = false;
        await userState.SetLogin(false, null);
        NavigationManager.NavigateTo("/");
    }

    public void OnHomeClick()
    {
        NavigationManager.NavigateTo("dashboard");
    }

    public void OnThemeNav()
    {
        NavigationManager.NavigateTo("themes");
    }

    public EventCallback<bool> SetLoader => EventCallback.Factory.Create<bool>(this, SetLoaderState);

    public void SetLoaderState(bool isLoaderVisible)
    {
        showLoader = isLoaderVisible;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./Shared/MainLayout.razor.js");
        }
        if (userState.IsUserLoggedIn && !isJsInit)
        {
            isJsInit = true;
            await module.InvokeAsync<string>("preventPopupPropagation");
        }
    }
}