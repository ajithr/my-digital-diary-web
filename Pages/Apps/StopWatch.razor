@page "/stop-watch"
@using Recurop
@inject UserState userState
@inject RecurringOperationsManager Recurop
@implements IDisposable

<AppLayout ClassName="stop-watch" Heading="Stop Watch">
    <MudPaper Class="circle d-flex align-items-center justify-content-center">
        <BSRow>
            <MudText Typo="Typo.h3" Align="@MudBlazor.Align.Center" Class="@(isTimerVisible ? "visible" : "invisible")">@displayTime</MudText>
        </BSRow>
    </MudPaper>
    <BSRow>
        <BSCol Column="3">
            <div class="p-3 d-flex align-items-center justify-content-center">
                <MudIconButton Icon="@Icons.Filled.StopCircle" Style="@($"color:{userState.Theme};")"
                               Size="@MudBlazor.Size.Large" OnClick="StopTimer"
                               Disabled="@(!timerOperation.IsPaused)"></MudIconButton>
            </div>
        </BSCol>
        <BSCol Column="6">
            <div class="p-3 d-flex align-items-center justify-content-center play-pause">
                <MudToggleIconButton ToggledChanged="OnPlayPause" Size="MudBlazor.Size.Large"
                                     Icon="@Icons.Material.Filled.PlayCircle" Style="@($"color:{userState.Theme};")"
                                     ToggledIcon="@Icons.Material.Filled.PauseCircle" />
            </div>
        </BSCol>
        <BSCol Column="3">
            <div class="p-3 d-flex align-items-center justify-content-center">
                <MudIconButton Icon="@Icons.Filled.OutlinedFlag" Style="@($"color:{userState.Theme};")"
                               Size="@MudBlazor.Size.Large" OnClick="LapTime" Disabled="@(!timerOperation.IsRecurring)"></MudIconButton>
            </div>
        </BSCol>
    </BSRow>
    <BSRow>
        <div style="min-height: 12.5rem;">
            @if (lapsData?.Count > 0)
            {
                <MudTable Items="@lapsData" Hover="true" FixedHeader="true" Breakpoint="Breakpoint.None" Height="12.5rem">
                    <HeaderContent>
                        <MudTh></MudTh>
                        <MudTh>Lap Time</MudTh>
                        <MudTh>Split Time</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="">@context.Number</MudTd>
                        <MudTd DataLabel="Lap Time">@context.LapTime</MudTd>
                        <MudTd DataLabel="Split Time">@context.SplitTime</MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </div>
    </BSRow>
</AppLayout>

<style>
    .stop-watch .circle {
        height: 12.5rem;
        width: 12.5rem;
        border-radius: 50%;
        margin: 0 auto;
        color: @MudBlazor.Colors.Shades.White;
        background: @userState.Theme;
    }

    .play-pause svg.mud-icon-root {
        height: 3.5rem;
        width: 3.5rem;
    }

    @@media (max-width: 500px) {
        .stop-watch .app-inner-layout {
            padding: 1.5rem 1.25rem 1.125rem;
        }

        .stop-watch .circle {
            height: 8.5rem;
            width: 8.5rem;
        }

        .stop-watch h3.mud-typography {
            font-size: 2rem;
        }
    }

</style>

@code {
    private int elapsedSeconds;
    private bool isTimerVisible = true;
    private TimeSpan displayTime = default;
    private RecurringOperation timerOperation;
    private RecurringOperation blinkOperation;
    private List<LapsTable>? lapsData { get; set; }

    protected override void OnInitialized()
    {
        timerOperation = new("timer");
        timerOperation.Operation = IncrementTimer;
        timerOperation.StatusChanged += TimerOperationStatusChanged;
        blinkOperation = new("blinker");
        blinkOperation.Operation = BlinkTimer;
        blinkOperation.StatusChanged += BlinkerOperationStatusChanged;
        lapsData = new List<LapsTable>();
    }

    public class LapsTable
    {
        public int Number { get; set; }
        public TimeSpan LapTime { get; set; }
        public TimeSpan SplitTime { get; set; }
    }

    public void OnPlayPause(bool isRunning)
    {
        if (isRunning)
        {
            if (displayTime == default(TimeSpan))
            {
                Recurop.StartRecurring(timerOperation, TimeSpan.FromSeconds(1));
            }
            else
            {
                Recurop.ResumeRecurring(timerOperation);
                Recurop.CancelRecurring(blinkOperation);
            }
        }
        else
        {
            Recurop.PauseRecurring(timerOperation);
            Recurop.StartRecurring(blinkOperation, TimeSpan.FromSeconds(0.5));
        }
    }

    public void StopTimer()
    {
        lapsData?.Clear();
        Recurop.CancelRecurring(timerOperation);
        Recurop.CancelRecurring(blinkOperation);
    }

    public void LapTime()
    {
        var lapsTime = lapsData.Count == 0 ? displayTime : displayTime - lapsData.Last().SplitTime;
        lapsData.Add(new LapsTable() { Number = lapsData.Count + 1, LapTime = lapsTime, SplitTime = displayTime });
    }

    public void IncrementTimer()
    {
        elapsedSeconds++;
        displayTime = TimeSpan.FromSeconds(elapsedSeconds);
        StateHasChanged();
    }

    public void BlinkTimer()
    {
        isTimerVisible = !isTimerVisible;
        StateHasChanged();
    }

    public void BlinkerOperationStatusChanged()
    {
        if (blinkOperation.Status == RecurringOperationStatus.Cancelled)
        {
            isTimerVisible = true;
        }
    }

    public void TimerOperationStatusChanged()
    {
        if (timerOperation.Status == RecurringOperationStatus.Cancelled)
        {
            lapsData?.Clear();
            elapsedSeconds = 0;
            displayTime = TimeSpan.Zero;
        }
    }

    public void Dispose()
    {
        lapsData = null;
        Recurop.CancelRecurring(timerOperation);
        Recurop.CancelRecurring(blinkOperation);
    }
}