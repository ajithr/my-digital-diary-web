@using Syncfusion.Blazor.CircularGauge;
@using System.Timers
@implements IDisposable;
@inject UserState userState;

<SfCircularGauge @ref="ClockRef" Background="transparent">
    <CircularGaugeAxes>
        <CircularGaugeAxis Radius="90%" StartAngle="0" EndAngle="0" Minimum="0" Maximum="12">
            <CircularGaugeAxisLabelStyle HiddenLabel="HiddenLabel.First" Offset="10">
                <CircularGaugeAxisLabelFont FontFamily="inherit" />
            </CircularGaugeAxisLabelStyle>
            <CircularGaugeAxisLineStyle Width="2" />
            <CircularGaugeAxisMajorTicks Height="15" Interval="1" Width="2" Offset="5" />
            <CircularGaugeAxisMinorTicks Height="10" Width="1" Interval="0.2" Offset="5" />
            <CircularGaugePointers>
                <CircularGaugePointer Value="@HoursPointer" Radius="60%" PointerWidth="5">
                    <CircularGaugePointerAnimation Enable="false" />
                    <CircularGaugeCap Radius="5" Color="white">
                        <CircularGaugeCapBorder Width="1" Color="#00A8B5" />
                    </CircularGaugeCap>
                    <CircularGaugeNeedleTail Length="0%" />
                </CircularGaugePointer>
                <CircularGaugePointer Value="@MinutesPointer" Radius="70%" PointerWidth="3">
                    <CircularGaugePointerAnimation Enable="false" />
                    <CircularGaugeCap Radius="5" Color="white">
                        <CircularGaugeCapBorder Width="1" Color="#00A8B5" />
                    </CircularGaugeCap>
                    <CircularGaugeNeedleTail Length="0%" />
                </CircularGaugePointer>
                <CircularGaugePointer Value="@SecondsPointer" Radius="90%" PointerWidth="3" NeedleStartWidth="1" Color="@userState.Theme">
                    <CircularGaugePointerAnimation Enable="false" />
                    <CircularGaugeCap Radius="5" Color="white">
                        <CircularGaugeCapBorder Width="1" Color="@userState.Theme" />
                    </CircularGaugeCap>
                    <CircularGaugeNeedleTail Length="25%" Color="@userState.Theme" />
                </CircularGaugePointer>
            </CircularGaugePointers>
        </CircularGaugeAxis>
    </CircularGaugeAxes>
</SfCircularGauge>

@code {
    private Timer timer;
    private TimeSpan TimeNow;
    public SfCircularGauge? ClockRef;
    public double SecondsPointer = 0.2;
    public double MinutesPointer = 0.1;
    public double HoursPointer = 1;

    [Parameter]
    public string TimeZone { get; set; }

    [Parameter]
    public EventCallback<string> TimeZoneChanged { get; set; }

    protected override void OnParametersSet()
    {
        if (timer != null)
        {
            timer.Dispose();
            timer = null;
        }
        timer = new Timer(1000);
        timer.Elapsed += this.NeedlePointerUpdate;
        timer.AutoReset = true;
        timer.Enabled = true;
        SetClockProperties();
    }

    private void SetClockProperties()
    {
        TimeZoneInfo timeZone = TimeZoneInfo.FindSystemTimeZoneById(TimeZone);
        DateTime utcTime = DateTime.Now.ToUniversalTime();
        DateTime dateTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, timeZone);
        HoursPointer = dateTime.Hour % 12;
        MinutesPointer = dateTime.Minute / 5;
        SecondsPointer = dateTime.Second / 10;
    }

    private void NeedlePointerUpdate(Object source, ElapsedEventArgs e)
    {
        //SetClockProperties();
        if (SecondsPointer > 11.8)
        {
            SecondsPointer = 0;
            MinutesPointer += 0.1;
            var minsPointerIndex = 1;
            if (MinutesPointer >= 12)
            {
                MinutesPointer = 0;
                minsPointerIndex = 0;
            }
            SetHoursPointer();
            ClockRef.SetPointerValueAsync(0, minsPointerIndex, MinutesPointer);
        }

        SecondsPointer += 0.2;
        ClockRef.SetPointerValueAsync(0, 2, SecondsPointer);
    }

    private void SetHoursPointer(bool setPointer = true)
    {
        var hoursPointer = Math.Floor(MinutesPointer * 10 / 12) / 10;
        var minutesInHours = HoursPointer - Math.Floor(HoursPointer);
        if (hoursPointer % 1 == 0)
        {
            hoursPointer = 0;
        }
        if (minutesInHours != hoursPointer)
        {
            HoursPointer = Convert.ToInt32(HoursPointer) + hoursPointer;
            if (setPointer)
            {
                ClockRef.SetPointerValueAsync(0, 1, HoursPointer);
            }
        }

    }

    public void Dispose()
    {
        timer.Dispose();
    }
}
